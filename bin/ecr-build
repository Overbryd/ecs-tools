#!/usr/bin/env ruby
#  ecr-build: Simple script for building docker images and pushing them to Amazon Elastic Container Service Registry (ECR)
#  
#  Usage: ecr-build [options]...
#  
#  Arguments:
#  
#     -k | --aws-access-key  AWS Access Key ID. May also be set as environment variable AWS_ACCESS_KEY_ID
#     -s | --aws-secret-key  AWS Secret Access Key. May also be set as environment variable AWS_SECRET_ACCESS_KEY
#     -r | --region          AWS Region Name. May also be set as environment variable AWS_DEFAULT_REGION
#  
#     -f | --file            Location of the Dockerfile (default: Dockerfile)
#     -r | --repository-url  Specify the ECR repository url (default: url from first repository)
#     -t | --tag             Tag of the docker image, eg. latest
#  
require "open3"
$stderr.sync = true
require "ecs_deploy"

def usage
  exec "grep '^#  ' < '#{__FILE__}' | cut -c4-"
end

def format_image_tag(tag)
  STDERR.puts "Warning: Provided image tag is longer than 30 characters. Resulting tag will be cut short." if tag.length > 30
  tag[0..29].gsub(/[^a-z0-9_.-]/, ".")
end

def cmd(command)
  # popen2e merges stdout and stderr
  Open3.popen2e(command) do |stdin, output, thread|
    while line = output.gets do
      puts line
    end
    process_status = thread.value
    unless process_status.success?
      STDERR.puts "Error: '#{command}' failed with status #{process_status.exitstatus}"
      exit 1
    end
  end
end

# default options
aws_access_key = ENV["AWS_ACCESS_KEY_ID"]
aws_secret_key = ENV["AWS_SECRET_ACCESS_KEY"]
aws_region = ENV["AWS_REGION"] || ENV["AWS_DEFAULT_REGION"]
dockerfile = "Dockerfile"
repository = nil
image_tag = "latest"
force_tag = false

# parse arguments
ARGV.options do |opts|
  # aws options
  opts.on("-k", "--aws-access-key", String) { |v| aws_access_key = v }
  opts.on("-s", "--aws-secret-key", String) { |v| aws_secret_key = v }
  opts.on("-r", "--region=aws-region", String) { |v| aws_region = v }
  # ecr-build options
  opts.on("-f", "--file=name", String) { |v| dockerfile = v }
  opts.on("-r", "--repository-url=url", String) { |v| repository = v }
  opts.on("-t", "--tag=name", String) { |v| image_tag = v }
  opts.on("--force-tag") { |v| force_tag = true }
  opts.on_tail("-h", "--help", &method(:usage))
  opts.parse!
end

unless File.exist?(dockerfile)
  STDERR.puts "Dockerfile does not exist at #{`pwd`.strip}/#{dockerfile}"
  exit 1
end

unless repository
  STDERR.puts "Repository url must be defined using -r/--repository-url=url"
  exit 1
end

# configure Aws
Aws.config.update(region: aws_region, credentials: Aws::Credentials.new(aws_access_key, aws_secret_key))
ecr = Aws::ECR::Client.new

image_tag = format_image_tag(image_tag)
image_name = repository.sub(/\/.*$/, ":#{image_tag}")
target = "#{repository}:#{image_tag}"

# build the docker image
cmd "docker build --file #{dockerfile} --tag #{image_name} ."

# tag the docker image
cmd "docker tag #{force_tag ? "-f" : ""} #{image_name} #{target}"

# login
authorization_response = ecr.get_authorization_token
authorization_data = authorization_response.authorization_data.first
cmd "docker login -u AWS -p #{authorization_data.authorization_token} -e none #{authorization_data.proxy_endpoint}"

# push the image
cmd "docker push #{target}"
puts target

